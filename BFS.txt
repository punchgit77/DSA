
#include <iostream>
#include<bits/stdc++.h>
using namespace std;
class Graph{
    
    int V;
    list<int> *adj;
    bool* visited;
    public:    
    Graph(int V);
    void addEdges(int u,int v);
    void PrintGraph(int s);
        
};
Graph::Graph(int vertices) {
  V = vertices;
  adj = new list<int>[vertices];
}
void Graph:: addEdges(int x,int y){
    adj[x].push_back(y);
}

void Graph::PrintGraph(int s){
    
    visited = new bool[V];
    for(int i=0;i<V;i++){
        visited[i]=false;
    }
    
    list<int> q;
    visited[s]=true;
    q.push_back(s);
    while(!q.empty()){
        int node = q.front();
        cout<<node<<" ";
        q.pop_front();
        
        for(auto i : adj[node]){
            
            if(!visited[i]){
                visited[i]=true;
                q.push_back(i);
            }
        }
    }
    
    
    
    
}


int main()
{
  int v=4;
  Graph g(4);
  g.addEdges(0,1);
  g.addEdges(1,2);
  g.addEdges(0,2);
  g.addEdges(1,3);
  
  g.PrintGraph(0);
  
    return 0;
}
